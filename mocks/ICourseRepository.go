// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "brevet-api/models"

	repository "brevet-api/repository"

	utils "brevet-api/utils"

	uuid "github.com/google/uuid"
)

// ICourseRepository is an autogenerated mock type for the ICourseRepository type
type ICourseRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, course
func (_m *ICourseRepository) Create(ctx context.Context, course *models.Course) error {
	ret := _m.Called(ctx, course)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Course) error); ok {
		r0 = rf(ctx, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCourseImagesBulk provides a mock function with given fields: ctx, images
func (_m *ICourseRepository) CreateCourseImagesBulk(ctx context.Context, images []models.CourseImage) error {
	ret := _m.Called(ctx, images)

	if len(ret) == 0 {
		panic("no return value specified for CreateCourseImagesBulk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.CourseImage) error); ok {
		r0 = rf(ctx, images)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *ICourseRepository) DeleteByID(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCourseImagesByCourseID provides a mock function with given fields: ctx, courseID
func (_m *ICourseRepository) DeleteCourseImagesByCourseID(ctx context.Context, courseID uuid.UUID) error {
	ret := _m.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCourseImagesByCourseID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, courseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ICourseRepository) FindByID(ctx context.Context, id uuid.UUID) (*models.Course, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Course, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Course); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDWithImages provides a mock function with given fields: ctx, id
func (_m *ICourseRepository) FindByIDWithImages(ctx context.Context, id uuid.UUID) (*models.Course, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDWithImages")
	}

	var r0 *models.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Course, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Course); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFilteredCourses provides a mock function with given fields: ctx, opts
func (_m *ICourseRepository) GetAllFilteredCourses(ctx context.Context, opts utils.QueryOptions) ([]models.Course, int64, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFilteredCourses")
	}

	var r0 []models.Course
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.QueryOptions) ([]models.Course, int64, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.QueryOptions) []models.Course); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.QueryOptions) int64); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, utils.QueryOptions) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCourseBySlug provides a mock function with given fields: ctx, slug
func (_m *ICourseRepository) GetCourseBySlug(ctx context.Context, slug string) (*models.Course, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetCourseBySlug")
	}

	var r0 *models.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Course, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Course); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSlugExists provides a mock function with given fields: ctx, slug
func (_m *ICourseRepository) IsSlugExists(ctx context.Context, slug string) bool {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for IsSlugExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, course
func (_m *ICourseRepository) Update(ctx context.Context, course *models.Course) error {
	ret := _m.Called(ctx, course)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Course) error); ok {
		r0 = rf(ctx, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: tx
func (_m *ICourseRepository) WithTx(tx *gorm.DB) repository.ICourseRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 repository.ICourseRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.ICourseRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ICourseRepository)
		}
	}

	return r0
}

// NewICourseRepository creates a new instance of ICourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICourseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICourseRepository {
	mock := &ICourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
