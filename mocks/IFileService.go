// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// IFileService is an autogenerated mock type for the IFileService type
type IFileService struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: cleanPath
func (_m *IFileService) DeleteFile(cleanPath string) error {
	ret := _m.Called(cleanPath)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(cleanPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveFile provides a mock function with given fields: ctx, file, location, allowedExts
func (_m *IFileService) SaveFile(ctx *fiber.Ctx, file *multipart.FileHeader, location string, allowedExts []string) (string, error) {
	ret := _m.Called(ctx, file, location, allowedExts)

	if len(ret) == 0 {
		panic("no return value specified for SaveFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *multipart.FileHeader, string, []string) (string, error)); ok {
		return rf(ctx, file, location, allowedExts)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *multipart.FileHeader, string, []string) string); ok {
		r0 = rf(ctx, file, location, allowedExts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx, *multipart.FileHeader, string, []string) error); ok {
		r1 = rf(ctx, file, location, allowedExts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveGeneratedFile provides a mock function with given fields: location, filename, data
func (_m *IFileService) SaveGeneratedFile(location string, filename string, data []byte) (string, error) {
	ret := _m.Called(location, filename, data)

	if len(ret) == 0 {
		panic("no return value specified for SaveGeneratedFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) (string, error)); ok {
		return rf(location, filename, data)
	}
	if rf, ok := ret.Get(0).(func(string, string, []byte) string); ok {
		r0 = rf(location, filename, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []byte) error); ok {
		r1 = rf(location, filename, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFileService creates a new instance of IFileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFileService {
	mock := &IFileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
