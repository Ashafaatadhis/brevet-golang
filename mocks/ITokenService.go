// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "brevet-api/models"

	mock "github.com/stretchr/testify/mock"

	utils "brevet-api/utils"

	uuid "github.com/google/uuid"
)

// ITokenService is an autogenerated mock type for the ITokenService type
type ITokenService struct {
	mock.Mock
}

// ExtractUserIDFromToken provides a mock function with given fields: token, secret
func (_m *ITokenService) ExtractUserIDFromToken(token string, secret string) (*utils.VerificationClaims, error) {
	ret := _m.Called(token, secret)

	if len(ret) == 0 {
		panic("no return value specified for ExtractUserIDFromToken")
	}

	var r0 *utils.VerificationClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*utils.VerificationClaims, error)); ok {
		return rf(token, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) *utils.VerificationClaims); ok {
		r0 = rf(token, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.VerificationClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJWT provides a mock function with given fields: user, jwtSecret, expiryHours
func (_m *ITokenService) GenerateJWT(user models.User, jwtSecret string, expiryHours int) (string, error) {
	ret := _m.Called(user, jwtSecret, expiryHours)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User, string, int) (string, error)); ok {
		return rf(user, jwtSecret, expiryHours)
	}
	if rf, ok := ret.Get(0).(func(models.User, string, int) string); ok {
		r0 = rf(user, jwtSecret, expiryHours)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(models.User, string, int) error); ok {
		r1 = rf(user, jwtSecret, expiryHours)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateVerificationToken provides a mock function with given fields: userID, email
func (_m *ITokenService) GenerateVerificationToken(userID uuid.UUID, email string) (string, error) {
	ret := _m.Called(userID, email)

	if len(ret) == 0 {
		panic("no return value specified for GenerateVerificationToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (string, error)); ok {
		return rf(userID, email)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) string); ok {
		r0 = rf(userID, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(userID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITokenService creates a new instance of ITokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITokenService {
	mock := &ITokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
