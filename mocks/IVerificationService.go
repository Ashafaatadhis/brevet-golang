// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// IVerificationService is an autogenerated mock type for the IVerificationService type
type IVerificationService struct {
	mock.Mock
}

// GenerateVerificationCode provides a mock function with given fields: ctx, tx, userID
func (_m *IVerificationService) GenerateVerificationCode(ctx context.Context, tx *gorm.DB, userID uuid.UUID) (string, error) {
	ret := _m.Called(ctx, tx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateVerificationCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID) (string, error)); ok {
		return rf(ctx, tx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID) string); ok {
		r0 = rf(ctx, tx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uuid.UUID) error); ok {
		r1 = rf(ctx, tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCooldownRemaining provides a mock function with given fields: ctx, userID
func (_m *IVerificationService) GetCooldownRemaining(ctx context.Context, userID uuid.UUID) (time.Duration, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCooldownRemaining")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (time.Duration, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) time.Duration); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyCode provides a mock function with given fields: ctx, userID, code
func (_m *IVerificationService) VerifyCode(ctx context.Context, userID uuid.UUID, code string) bool {
	ret := _m.Called(ctx, userID, code)

	if len(ret) == 0 {
		panic("no return value specified for VerifyCode")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) bool); ok {
		r0 = rf(ctx, userID, code)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIVerificationService creates a new instance of IVerificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVerificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVerificationService {
	mock := &IVerificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
